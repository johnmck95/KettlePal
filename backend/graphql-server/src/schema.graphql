type User {
  uid: ID!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  isAuthorized: Boolean!
  workouts(offset: Int, limit: Int): [Workout]!
  createdAt: String!
  tokenCount: Int!
  userStats: UserStats
  atAGlance(period: String!, dateRange: String!): AtAGlance
}

type AtAGlance {
  period: String!
  dateRange: String!
  data: [AtAGlanceData]!
}

type AtAGlanceData {
  dateRange: String!
  elapsedSeconds: Int!
  workCapacityKg: Int!
}

type UserStats {
  totalWorkouts: Int!
  totalExercises: Int!
  totalTime: Int
  longestWorkout: Int
  mostRepsInWorkout: Int
  largestWorkCapacityKg: Int
  topExercises: String
  oldestWorkoutDate: String
}

# Bit of a hack to let fuzzy search bypass Workouts{Exericises{}} graphql traversal.
type WorkoutWithExercises {
  uid: ID!
  date: String!
  elapsedSeconds: Int
  comment: String
  userUid: ID!
  exercises: [Exercise!]!
}

type UserPastWorkouts {
  uid: ID!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  isAuthorized: Boolean!
  workoutWithExercises: [WorkoutWithExercises]!
}

type Workout {
  uid: ID!
  date: String!
  createdAt: String!
  elapsedSeconds: Int
  comment: String
  userUid: ID!
  exercises: [Exercise!]
}

type Exercise {
  uid: ID!
  workoutUid: ID!
  title: String!
  createdAt: String!
  weight: Float
  weightUnit: String
  sets: Int
  reps: Int
  repsDisplay: String
  comment: String
  elapsedSeconds: Int
}

type CheckSessionResponse {
  isValid: Boolean!
  user: User
}

# Required: Defines the entry points to the graph
type Query {
  users: [User]
  user(uid: ID!): User
  workouts(offset: Int, limit: Int): [Workout]
  workout(uid: ID!): Workout
  exercises: [Exercise]
  exercise(uid: ID!): Exercise

  checkSession: CheckSessionResponse!
  pastWorkouts(
    userUid: ID!
    searchQuery: String
    offset: Int
    limit: Int
  ): UserPastWorkouts
}

type RefreshTokenResponse {
  success: Boolean!
  message: String
}

type Mutation {
  deleteUser(uid: ID!): [User]!
  deleteWorkout(uid: ID!): [Workout]!
  deleteExercise(uid: ID!): Exercise!
  deleteWorkoutWithExercises(workoutUid: ID!): Workout!

  addUser(user: AddUserInput!): User
  addExercise(workoutUid: ID!, exercise: AddExerciseInput!): Exercise
  addWorkout(userUid: ID!, workout: AddOrEditWorkoutInput!): Workout
  addWorkoutWithExercises(
    userUid: ID!
    workoutWithExercises: AddWorkoutWithExercisesInput!
  ): Workout!

  updateUser(uid: ID!, edits: EditUserInput!): User
  updateWorkout(uid: ID!, edits: AddOrEditWorkoutInput!): Workout
  updateExercise(uid: ID!, edits: EditExerciseInput!): Exercise
  updateWorkoutWithExercises(
    workoutUid: ID!
    workoutWithExercises: UpdateWorkoutWithExercisesInput!
  ): Workout

  signUp(user: AddUserInput!): User
  login(email: String!, password: String!): User
  refreshToken: RefreshTokenResponse!
  invalidateToken: Boolean!
}

# Input types omit data fields we want the system to generate (like uids)
# Edits often vary from inputs, because we don't want to require all fields

input AddOrEditUserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  tokenCount: Int!
}

input AddUserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

input EditUserInput {
  firstName: String
  lastName: String
  email: String
  password: String
}

input AddOrEditWorkoutInput {
  date: String!
  elapsedSeconds: Int
  comment: String
}

input AddWorkoutWithExercisesInput {
  date: String!
  elapsedSeconds: Int
  comment: String
  exercises: [AddExerciseInput]!
}

input UpdateWorkoutWithExercisesInput {
  date: String!
  elapsedSeconds: Int
  comment: String
  exercises: [UpdateExerciseInput]!
}

input UpdateExerciseInput {
  uid: ID!
  title: String!
  weight: String
  weightUnit: String
  sets: String
  reps: String
  repsDisplay: String
  comment: String
  elapsedSeconds: Int
  key: String
}

input AddExerciseInput {
  title: String!
  weight: String
  weightUnit: String
  sets: String
  reps: String
  repsDisplay: String
  comment: String
  elapsedSeconds: Int
  key: String
}

input EditExerciseInput {
  title: String!
  weight: String
  weightUnit: String
  sets: String
  reps: String
  repsDisplay: String
  comment: String
  elapsedSeconds: Int
}
